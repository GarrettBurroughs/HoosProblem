{"version":3,"sources":["components/Header.tsx","components/Post.tsx","components/PostInput.tsx","components/Homepage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledHeader","styled","div","Header","StyledPost","StyledAvatar","img","StyledPostHeader","StyledDate","StyledPostContent","Post","postContent","postTime","React","avatarKey","setAvatarKey","key","crypto","createHash","update","digest","console","log","date","src","alt","Date","getHours","getMinutes","getMonth","getDate","getFullYear","StyledPostInput","StyledTextarea","textarea","StyledButton","button","PostInput","db","textAreaContent","setTextAreaContent","placeholder","onChange","e","target","value","onClick","event","preventDefault","postCollection","collection","ts","Timestamp","now","addDoc","time","StyledGrid","StyledContentArea","spinnerAnimation","keyframes","Spinner","Homepage","setDb","posts","setPosts","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getFirestore","postsCol","onSnapshot","col","forEach","doc","data","push","sort","a","b","seconds","map","p","i","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd82eaaa.chunk.js","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\n\nconst StyledHeader = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    display: flex;\n    background-color: var(--uva-orange);\n    color: var(--uva-blue);\n    font-family: var(--header-text);\n    font-size: 34px;\n    font-weight: bold; \n    width: 100%;\n    height: 70px;\n    align-items: center;\n    justify-content: center;\n    z-index: 2;\n\n`; \n\nconst Header: React.FunctionComponent = () => {\n    return (\n        <StyledHeader>\n            Hoos Problem\n        </StyledHeader>\n    );\n}\n\nexport default Header;","import * as React from 'react';\nimport styled from 'styled-components';\nimport crypto from 'crypto';\n\ninterface PostProps{\n    postContent: string; \n    postTime: number; \n}\n\nconst StyledPost = styled.div`\n    width: 60%;\n    @media only screen and (max-width: 700px){\n        width: 90%;\n    }\n    border-radius: 10px;\n    box-shadow: 0px 0px 2px grey;\n    margin: auto;\n    margin-top: 20px;\n    margin-bottom: 20px;\n    overflow: hidden;\n    text-align: left;\n    \n`\nconst StyledAvatar = styled.img`\n    border-radius: 100px;\n    width: 50px;\n    height: 50px;\n    background-color: #EEEEEE;\n    margin-left: 30px;\n    margin-top: 5px;\n`\n\nconst StyledPostHeader = styled.div`\n    width: 100%;\n    background-color: var(--uva-orange);\n    height: 20px;\n`\n\nconst StyledDate = styled.div`\n    display: inline-block;\n    & p {\n        transform: translate(10%, -75%)\n    }\n`;\n\nconst StyledPostContent = styled.div`\n    margin-left: 53px;\n    border-left: 5px solid rgba(35, 45, 75, .5);\n    padding-left: 3px;\n    margin-bottom: 15px;\n`;\n\n\n\nconst Post: React.FunctionComponent<PostProps> = ({ postContent, postTime }) => {\n    const [avatarKey, setAvatarKey] = React.useState<string>(\"\");\n    React.useEffect(() => {\n        const key = crypto.createHash('md5').update(postContent).digest('hex');\n        console.log(key);\n        setAvatarKey(key);\n    }, [postContent])\n\n    const formatDate = (date: Date) => {\n        return `${date.getHours()}:${date.getMinutes()} on ${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n    }\n\n    return (\n        <StyledPost>\n            <StyledPostHeader></StyledPostHeader>\n            <StyledAvatar src={`https://avatars.dicebear.com/api/bottts/${avatarKey}.svg`} alt=\"Randomly generated user robot avatar\"></StyledAvatar>\n            <StyledDate>\n                <p>At {formatDate(new Date(postTime * 1000))}</p>\n            </StyledDate>\n            <StyledPostContent>\n                {postContent}\n            </StyledPostContent>\n        </StyledPost>\n    );\n}\n\nexport default Post;","import { Firestore, addDoc, collection, Timestamp } from 'firebase/firestore';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\ninterface PostInputProps{\n    db?: Firestore;\n}\n\n\nconst StyledPostInput = styled.div`\n    width: 60%;\n    @media only screen and (max-width: 700px){\n        width: 90%;\n    }\n    border-radius: 10px;\n    box-shadow: 0px 0px 2px grey;\n    margin: auto;\n    margin-top: 20px;\n    margin-bottom: 20px;\n    overflow: hidden;\n    text-align: left;\n    position: relative; \n`\n\nconst StyledTextarea = styled.textarea`\n    width: 90%;\n    margin-right: 5%;\n    margin-left: 5%;\n    margin-top: 15px;\n    height: 70px;\n    border: none;\n    font-family: var(--body-text);\n    outline: none;\n    resize: none;\n    font-size: 18px;\n`;\n\nconst StyledButton = styled.button`\n    border: none;\n    font-family: var(--header-text);\n    color: var(--uva-blue);\n    background-color: var(--uva-orange);\n    border-radius: 10px;\n    height: 40px;\n    width: 70px;\n    font-size: 24px;\n    position: absolute;\n    right: 10px;\n    bottom: 10px;\n\n    &:hover {\n        box-shadow: 0px 0px 3px 0px var(--uva-blue);\n    }\n    \n    &:active {\n        border: 1px inset black; \n    }\n`;\nconst PostInput: React.FunctionComponent<PostInputProps> = ({ db }) => {\n    const [textAreaContent, setTextAreaContent] = React.useState<string>();\n    \n    const handleInput: React.MouseEventHandler = (event: React.MouseEvent) => {\n        event.preventDefault();\n        console.log(textAreaContent);\n        if (db) {\n            const postCollection = collection(db, 'posts');\n            const ts = new Timestamp(Date.now()/1000, 0);\n            addDoc(postCollection, {\n                postContent: textAreaContent,\n                time: ts\n            });\n            console.log('post created');\n        } else {\n            console.log('not connected to database');\n        }\n    }\n    \n    return (\n        <StyledPostInput>\n            <StyledTextarea placeholder=\"Have a problem?\" onChange={(e) => {setTextAreaContent(e.target.value)}}></StyledTextarea>\n            <StyledButton onClick={handleInput}>Post!</StyledButton>\n        </StyledPostInput>\n    );\n}\n\nexport default PostInput;","import * as React from 'react';\nimport styled, {keyframes} from 'styled-components';\nimport Header from './Header';\nimport Post from './Post';\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, Firestore, onSnapshot } from 'firebase/firestore';\nimport PostInput from './PostInput';\n\n\n\ninterface IPost {\n    postContent: string;\n    time: {\n        seconds: number;\n        nanoseconds: number; \n    }\n}\n\n\nconst StyledGrid = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 80% 1fr;\n    @media only screen and (max-width: 700px){\n        grid-template-columns: 1fr 95% 1fr;\n    }\n`;\n\nconst StyledContentArea = styled.div`\n    grid-column: 2;\n    /*box-shadow: 0px 0px 5px #888888;*/\n    margin-top: 100px;\n    border-radius: 3px;\n`;\n\nconst spinnerAnimation = keyframes`\n    0% { transform: rotate(0deg); }\n    75% { transform: rotate(280deg); }\n    100% { transform: rotate(360deg); }\n`;\n\nconst Spinner = styled.div`\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    border: solid 10px var(--uva-orange);\n    border-bottom-color: var(--uva-blue);\n    animation: 1s linear infinite ${spinnerAnimation};\n    margin: auto;\n`;\n\n\n\nconst Homepage: React.FunctionComponent = () => {\n    const [db, setDb] = React.useState<Firestore>();\n    const [posts, setPosts] = React.useState<IPost[]>();\n\n    React.useEffect(() => {\n        const firebaseConfig = {\n            apiKey: \"AIzaSyCLrzhIG7ld1Q5qCVIRPP1P6j9DHNsXL7A\",\n            authDomain: \"hoosproblem.firebaseapp.com\",\n            projectId: \"hoosproblem\",\n            storageBucket: \"hoosproblem.appspot.com\",\n            messagingSenderId: \"448797692895\",\n            appId: \"1:448797692895:web:b8ebcd0cb0740bc105aa6a\",\n            measurementId: \"G-C1CFQGDTVN\"\n        };\n\n        // Initialize Firebase\n        initializeApp(firebaseConfig);\n        const db = getFirestore();\n        setDb(db);\n\n        const postsCol = collection(db, 'posts');\n\n        onSnapshot(postsCol, (col) => {\n            const posts: IPost[] = [];\n\n            col.forEach(doc => {\n                const data = doc.data();\n                posts.push({\n                    postContent: data.postContent,\n                    time: data.time\n                });\n            });\n\n            setPosts(posts);\n\n        });\n    }, []);\n\n    const comparePosts: (a: IPost, b: IPost) => number = (a, b) => {\n        return b.time.seconds - a.time.seconds;\n    }\n    \n    return (\n        <div>\n            <Header></Header>\n            <StyledGrid>\n                <StyledContentArea>\n                    <PostInput db={db}></PostInput>\n                    {\n                        posts ? posts.sort(comparePosts).map((p, i) => <Post postContent={p.postContent} postTime={p.time.seconds} key={i} />) : <Spinner />\n                    }\n                </StyledContentArea>\n            </StyledGrid>\n            \n            \n        </div>\n    );\n}\n\nexport default Homepage;","import React from 'react';\nimport './App.css';\nimport Homepage from './components/Homepage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Homepage></Homepage>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}